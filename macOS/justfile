# Build Rust library first
build-rust:
    #!/usr/bin/env bash
    ./build_rust.sh
    # Also copy to where Xcode expects it for Debug builds
    mkdir -p build/Debug
    cp lib/libcore.a build/Debug/
    # Copy to DerivedData directory if it exists
    DERIVED_DATA_DIR=$(xcodebuild -project THKeyVis.xcodeproj -showBuildSettings 2>/dev/null | grep "BUILT_PRODUCTS_DIR.*Debug" | head -1 | sed 's/.*= //')
    if [ -n "$DERIVED_DATA_DIR" ]; then
        echo "Copying to Xcode derived data directory: $DERIVED_DATA_DIR"
        mkdir -p "$DERIVED_DATA_DIR"
        cp lib/libcore.a "$DERIVED_DATA_DIR/"
    fi

# Build debug configuration (with Rust)
build-debug: build-rust
    xcodebuild -project THKeyVis.xcodeproj -scheme THKeyVis -configuration Debug build

# Build Rust for release
build-rust-release:
    #!/usr/bin/env bash
    ./build_rust.sh
    # Copy to where Xcode expects it for Release builds  
    mkdir -p build/Release
    cp lib/libcore.a build/Release/

# Build release configuration (with Rust)
build-release: build-rust-release
    xcodebuild -project THKeyVis.xcodeproj -scheme THKeyVis -configuration Release build

# Run debug build
run-debug:
    #!/usr/bin/env bash
    APP_PATH=$(xcodebuild -project THKeyVis.xcodeproj -scheme THKeyVis -configuration Debug -showBuildSettings | grep "BUILT_PRODUCTS_DIR" | head -1 | sed 's/.*= //')
    open "$APP_PATH/THKeyVis.app"

# Run release build
run-release:
    #!/usr/bin/env bash
    APP_PATH=$(xcodebuild -project THKeyVis.xcodeproj -scheme THKeyVis -configuration Release -showBuildSettings | grep "BUILT_PRODUCTS_DIR" | head -1 | sed 's/.*= //')
    open "$APP_PATH/THKeyVis.app"
